# Personal Finance Management App - Backend in Python (Flask Framework)

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)

# Configuration
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///finance.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

# Database Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

class Transaction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    amount = db.Column(db.Float, nullable=False)
    category = db.Column(db.String(50), nullable=False)
    description = db.Column(db.String(200))
    date = db.Column(db.DateTime, default=datetime.utcnow)
    type = db.Column(db.String(10), nullable=False)  # 'income' or 'expense'

# Initialize database
@app.before_first_request
def create_tables():
    db.create_all()

# Routes

# 1. Register a User
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    new_user = User(name=data['name'], email=data['email'], password=data['password'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "User registered successfully!"}), 201

# 2. Add a Transaction
@app.route('/transaction', methods=['POST'])
def add_transaction():
    data = request.json
    new_transaction = Transaction(
        user_id=data['user_id'],
        amount=data['amount'],
        category=data['category'],
        description=data.get('description', ''),
        type=data['type']
    )
    db.session.add(new_transaction)
    db.session.commit()
    return jsonify({"message": "Transaction added successfully!"}), 201

# 3. Get Transactions by User
@app.route('/transactions/<int:user_id>', methods=['GET'])
def get_transactions(user_id):
    transactions = Transaction.query.filter_by(user_id=user_id).all()
    output = []
    for transaction in transactions:
        output.append({
            "id": transaction.id,
            "amount": transaction.amount,
            "category": transaction.category,
            "description": transaction.description,
            "date": transaction.date.strftime('%Y-%m-%d %H:%M:%S'),
            "type": transaction.type
        })
    return jsonify(output)

# 4. Summary of Expenses and Income
@app.route('/summary/<int:user_id>', methods=['GET'])
def summary(user_id):
    income = db.session.query(db.func.sum(Transaction.amount)).filter_by(user_id=user_id, type='income').scalar() or 0
    expense = db.session.query(db.func.sum(Transaction.amount)).filter_by(user_id=user_id, type='expense').scalar() or 0
    return jsonify({"income": income, "expense": expense, "balance": income - expense})

if __name__ == '__main__':
    app.run(debug=True)
